---
- name: Deploy Scientific Calculator Container
  hosts: localhost
  connection: local
  become: yes

  vars:
    app_name: scicalc
    image_name: sparshdockerman/scicalc:latest
    container_port: 8080
    host_port: 9090

  tasks:
    - name: Check if Docker is already installed
      shell: "docker --version"
      register: docker_check
      ignore_errors: yes

    - name: Install Docker if not installed
      shell: |
        apt-get update -y
        apt-get install -y ca-certificates curl gnupg lsb-release
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
          https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
        apt-get update -y
        apt-get install -y docker-ce docker-ce-cli containerd.io
      when: docker_check.rc != 0

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true

    - name: Pull latest Docker image
      shell: |
        echo "Pulling image {{ image_name }}..."
        docker pull {{ image_name }}

    # NEW: stop anything already bound to the chosen host port (e.g., 9090)
    - name: Stop and remove any container using host port
      shell: |
        echo "Checking for containers using port {{ host_port }}..."
        ids=$(docker ps --filter "publish={{ host_port }}" -q)
        if [ -n "$ids" ]; then
          echo "Stopping containers on port {{ host_port }}..."
          docker stop $ids
          docker rm $ids
        fi

    # Existing logic: stop/remove by known name
    - name: Stop and remove existing container if running (by name)
      shell: |
        echo "Checking for existing container named {{ app_name }}..."
        if [ "$(docker ps -q -f name={{ app_name }})" ]; then
          docker stop {{ app_name }}
        fi
        if [ "$(docker ps -aq -f name={{ app_name }})" ]; then
          docker rm {{ app_name }}
        fi

    # Interactive CLI run (kept as-is) â€” no ports needed for CLI
    - name: Run new CLI container interactively
      shell: |
        echo "Starting interactive container {{ app_name }}..."
        docker run -it --name {{ app_name }} --rm {{ image_name }} <<'EOF'
        echo "Scientific Calculator CLI started"
        exit
        EOF
      register: run_output
      ignore_errors: yes

    - name: Verify running containers
      shell: "docker ps --filter name={{ app_name }}"
      register: container_status

    - name: Display container status and CLI output
      debug:
        msg:
          - "Container status:"
          - "{{ container_status.stdout_lines }}"
          - "CLI output:"
          - "{{ run_output.stdout_lines }}"
